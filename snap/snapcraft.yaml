%YAML 1.1
---
# Snapcraft Recipe for cURL(with metalink support)
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft
name: curl-metalink
title: cURL(with Metalink support)
summary: Download Metalinks with cURL for Debianish distros
description: |
  This snap ships a build of cURL with [Metalink][1] support to provide a *workaround* for Debianish GNU/Linux distributions where the feature is not enabled due to the missing packaging of libmetalink([Debian][2], [Ubuntu][3]).

  This snap does not guarantee to be up-to-date with upstream and free of security exploits, and is only recommended for downloading metalinks only.

  [1]: https://en.wikipedia.org/wiki/Metalink (Metalink - Wikipedia)
  [2]: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=683969 (#683969 - curl: Build using --with-libmetalink - Debian Bug report logs)
  [3]: https://bugs.launchpad.net/ubuntu/+source/curl/+bug/1391779 (Bug #1391779 “curl not build with metalink support” : Bugs : curl package : Ubuntu)

# The path of icon to represent the snap, relative to the source tree directory
# Only PNG or SVG image is supported, dimension must be greater than 256x256px
icon: snap/gui/icon.svg

# The license of this application, in SPDX format
# NOTE: Currently only supports SPDX 2.1 license expressions, as described in Appendix IV of
# https://spdx.org/spdx-specification-21-web-version
# Supported expressions:
# https://github.com/snapcore/snapd/blob/HEAD/spdx/licenses.go
license: curl

# Version string just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version string
# being accidentally interpreted as a YAML non-string(like '1', '1.2').
# http://yaml.org/type
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
# NOTE: This key is mutual exclusive with the `adopt-info` key
#version: Derived from the part specified by the `adopt-info` property

# Extract metadata from the main snap part
# https://forum.snapcraft.io/t/extracting-information-from-sources-in-snapcraft-parts/4642
adopt-info: main

# Snapd feature set and version the snap requires in order to work
# https://forum.snapcraft.io/t/snapcraft-top-level-metadata/8334#heading--assumes
assumes:
- command-chain

# Base runtime
# The common runtime for the snap to run on, or `bare` for static linked applications
# https://docs.snapcraft.io/snapcraft-top-level-metadata/8334#heading--base
base: core24

# Security confinement
# Use `devmode` to getting started
# Flip to `strict` once you have the right plugs and slots,
# or `classic` once you determine that strict confinement is not currently possible
confinement: strict

# Snap Grade
# Use `devel` to getting started
# Flip to `stable` once you determine that the snap is matured, only `stable` grade
# snaps can be promoted to `candidate` and `stable` channels
grade: stable

# Run `snapcraft help sources` for supported keywords on pulling a part's source ingredients
# Run `snapcraft plugins` for supported build helper plugins
# Run `snapcraft help plugins` for supported keywords on building a part
# For `override-*` scriptlets used to modify behavior of certain part's lifecycle phase, check out:
# https://docs.snapcraft.io/scriptlets/4892
parts:
  # Files to patch the files in the snap
  patching:
    source: snap/local/patching
    plugin: dump
    organize:
      '*': patching/
    prime:
    - -*

  # Launcher programs to fix problems at runtime
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*': bin/
    stage:
    - -bin/README.*

  # Stage snap for fixing the glibc locales(and gnu gettext I18N support)
  # This part is only required for non GUI apps that don't uses the desktop-launch launchers
  # https://forum.snapcraft.io/t/the-locales-launch-stage-snap/10296
  locales-launch:
    plugin: nil
    stage-snaps:
    - locales-launch
    stage-packages:
    # For localedef(1)
    - libc-bin

    # For locale data used by localedef(1)
    - locales

  libmetalink-runtime-deps:
    plugin: nil
    stage-packages:
    #- libexpat1
    - libxml2

  libmetalink:
    after:
    - patching

    source: https://github.com/metalink-dev/libmetalink.git
    source-tag: release-0.1.3
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
    - --prefix=
    build-packages:
    - autoconf
    - make
    - patch
    - pkg-config
    #- libexpat1-dev
    - libxml2-dev
    override-build: |
      set -o nounset

      patch \
        --strip=1 \
        < "${CRAFT_STAGE}"/patching/fix-issues-found-by-covscan.patch
      ./buildconf
      craftctl default
    prime:
    - lib/**.so*
    - usr/lib/*/**.so*

  main-runtime-deps:
    plugin: nil
    stage-packages:
    - libgnutls30t64

  main:
    after:
    - libmetalink

    source: https://github.com/curl/curl.git
    source-depth: 1
    source-tag: curl-7_77_0
    override-pull: |
      set -o nounset

      if ! craftctl default; then
          printf \
            'Error: Unable to run the default action of this step.\n' \
            1>&2
            exit 2
      fi

      packaging_revision="$(git -C "${CRAFT_PROJECT_DIR}" describe --abbrev=4 --dirty --always)"
      if ! craftctl set version="7.77.0+pkg-${packaging_revision}"; then
          printf \
            'Error: Unable to set the version of the snap.\n' \
            1>&2
            exit 2
      fi

    # https://github.com/curl/curl/blob/master/GIT-INFO
    # https://github.com/curl/curl/blob/master/docs/INSTALL.md
    plugin: autotools
    build-packages:
    - autoconf
    - automake
    - groff
    - libgnutls28-dev
    - libgsasl-dev
    - libpsl-dev
    - libtool
    - m4
    - pkg-config

    # selective-checkout dependencies
    - curl
    - jq
    - sed
    stage-packages:
    - libgsasl18
    - libgssglue1
    - libidn12
    - libntlm0
    - libpsl5t64
    autotools-configure-parameters:
    #- --enable-crypto-auth
    - --with-libmetalink
    - --with-gnutls
    - --prefix=
    build-environment:
    # Workaround missing DSO problem
    # https://segmentfault.com/a/1190000002462705
    - LDFLAGS: "-Wl,--copy-dt-needed-entries"
    prime:
    - bin/curl
    - lib/**.so*
    - usr/lib/*/**.so*
    - share/man/**.1*

# Apps that are exposed by the snap package
# If the _app_name_ is identical with the _snap_name_ it can be directly run
# with `_snap_name_` or `snap run _snap_name_` commands, otherwise it can only be run
# via `_snap_name_._app_name_` or `snap run _snap_name_._app_name_`
apps:
  curl-metalink:
    # An *relative path* to an executable file root from the `prime` directory to be executed, and its command-line arguments
    # NOTE: The right angle bracket at the beginning of the value of the `command` keyword starts a YAML folded style block scalar, refer the following spec document for more info: http://yaml.org/spec/1.2/spec.html#id2796251
    command: bin/curl

    # The commands that are run, in order, before running the one specified by the `command` key
    command-chain:
    - bin/locales-launch
    - bin/curl-metalink-launch

    plugs:
    - home
    - network
